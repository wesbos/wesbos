'use server';
import fg from 'fast-glob';
import path from 'node:path';
import { writeFile } from 'node:fs/promises';
const outputFile = path.resolve('./content/index.ts');
const outputDir = path.dirname(outputFile);

// TODO: Add a watcher to this file so it regenerates on changes
// import watch from 'glob-watcher';
// export async function watchForStyleChanges() {
//   await generateStyleIndex(); // Generate the initial style index

//   const watcher = watch(globs, {
//     ignoreInitial: true,
//   });

//   watcher.on('add', (filePath) => {
//     generateStyleIndex();
//   });
// }

async function generateStyleIndex() {
  const files = await fg(['./content/**/*.mdx']);
  console.log(`Found ${files.length} Mdx Files`);
  const importStatements = files.map((file, index) => {
    const relativePath = path.relative(outputDir, file);
    return `export * as _mdx_${index}_ from '${relativePath.startsWith('.') ? '' : './'}${relativePath}';`;
  });
  const mdxIndex = `/* This file is automatically generated by createMDXIndex.ts

  Import every single MDX file in the content folder. This gets around the fact that Cloudflare doesn't have filesystem access during runtime. This file will be re-generated on every build.
  */
${importStatements.join('\n')}`;
  await writeFile(outputFile, mdxIndex);
  console.log(`ðŸŽ‰ MDX index generated. Wrote ${files.length} file imports to ${outputFile}`);
}

generateStyleIndex();
